input {
    google_pubsub {
        # Your GCP project id (name)
        project_id => "${PROJECT_NAME}"
        topic => "enriched_events"
        subscription => "logstash-sub"
        json_key_file => "/opt/conf/logstash-secret/logstashsub.json"
    }
}

filter { ruby {
code => '
  begin
    json_message = JSON.parse(event.get("message"))
    if json_message!= NIL
      json_message.keys.each{|key|
        event.set(key, json_message[key])
      }
      
      headers_json = json_message["headers"]
      if headers_json != NIL
        headers = JSON.parse(headers_json)
        headers.keys.each{|key|
          event.set("headers." + key.gsub("-", "_").downcase, headers[key])
        }
        #event.set("raw_headers", event.get("headers"))
        event.remove("headers")
      end

      stages = ["replay", "request", "response"]
      stages.each { |stage|
        data_json = json_message["waf_%s_answer" % [stage]]
        if data_json != NIL

          #event.set("raw_waf_%s_answer" % [stage], data_json)
          event.remove("waf_%s_answer" % [stage])

          data = JSON.parse(data_json)
          data.keys.each{|key|
            if key == "modsecurity" or key == "rate_limiter" or key == "rule_engine"
              plugin_data = data[key]
              plugin = JSON.parse(plugin_data)
              plugin.keys.each{|plugin_key|
                if key == "modsecurity" and plugin_key == "alerts"
                  alert_data = plugin[plugin_key][0]
                  alert_data.keys.each{|alert_key|
                    event.set("waf_%s_answer.%s.%s.alert.%s" % [stage, key, plugin_key, alert_key], alert_data[alert_key])
                    event.set("waf_alert.%s" % [alert_key], alert_data[alert_key])
                  }
                else
                  event.set("waf_%s_answer.%s.%s" % [stage, key, plugin_key], plugin[plugin_key])
                end
              }
              #event.set("waf_%s_answer.raw_%s" % [stage, key], plugin_data)
              event.remove("waf_%s_answer.%s" % [stage, key])
            else
              event.set("waf_%s_answer.%s" % [stage, key.gsub("-", "_").downcase], data[key])
            end
          }
        end
      }

      event.remove("message")
    end
  end
' }}

filter {
  mutate {
    remove_field => [ "host" ]
  }
}

output { 
    stdout { codec => rubydebug } 
    elasticsearch {
        index     => "event_log_%{+YYYY.MM.dd}"
        hosts => ["elasticsearch-0.es.default.svc.cluster.local:9200"]
    }
}